#!/bin/bash

# book: Project documentation manager
# Usage: book [command] [options]

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Default documentation directory
DOCS_DIR="docs"

show_help() {
    cat << EOF
Usage: book [command] [options]

Commands:
    init                    Initialize documentation structure
    new [name]             Create a new documentation page
    list                   List all documentation pages
    edit [name]            Edit a documentation page
    view [name]            View a documentation page
    search [query]         Search documentation content
    build                  Build documentation (if supported)
    serve                  Serve documentation locally
    clean                  Clean built documentation

Examples:
    book init
    book new getting-started
    book list
    book edit api-reference
    book view architecture
    book search "authentication"
    book build
    book serve
    book clean
EOF
}

initialize_docs() {
    if [ -d "$DOCS_DIR" ]; then
        echo -e "${YELLOW}Documentation directory already exists${NC}"
        return
    fi

    echo -e "${BLUE}Initializing documentation structure...${NC}"
    mkdir -p "$DOCS_DIR"
    
    # Create basic structure
    mkdir -p "$DOCS_DIR"/{api,guides,reference,examples}
    
    # Create README
    cat > "$DOCS_DIR/README.md" << EOF
# Project Documentation

This directory contains the project documentation.

## Structure

- \`api/\`: API documentation
- \`guides/\`: How-to guides and tutorials
- \`reference/\`: Technical reference
- \`examples/\`: Code examples and snippets

## Usage

Use the \`book\` command to manage documentation:

\`\`\`bash
book new [name]     # Create new page
book edit [name]    # Edit page
book view [name]    # View page
book list          # List all pages
\`\`\`
EOF

    # Create initial pages
    cat > "$DOCS_DIR/guides/getting-started.md" << EOF
# Getting Started

Welcome to the project! This guide will help you get started.

## Prerequisites

- List of prerequisites
- Installation steps
- Basic configuration

## Quick Start

1. First step
2. Second step
3. Third step

## Next Steps

- Link to other guides
- Common issues
- Where to get help
EOF

    cat > "$DOCS_DIR/reference/architecture.md" << EOF
# Architecture

This document describes the system architecture.

## Overview

High-level system overview and components.

## Components

- Component 1
- Component 2
- Component 3

## Data Flow

Description of data flow between components.

## Security

Security considerations and measures.
EOF

    echo -e "${GREEN}Documentation structure initialized${NC}"
}

create_page() {
    local name="$1"
    if [ -z "$name" ]; then
        echo -e "${RED}Error: Please provide a page name${NC}"
        exit 1
    fi

    # Determine the appropriate directory based on the name
    local dir="$DOCS_DIR"
    if [[ "$name" == api-* ]]; then
        dir="$DOCS_DIR/api"
    elif [[ "$name" == guide-* ]]; then
        dir="$DOCS_DIR/guides"
    elif [[ "$name" == ref-* ]]; then
        dir="$DOCS_DIR/reference"
    elif [[ "$name" == example-* ]]; then
        dir="$DOCS_DIR/examples"
    fi

    local file="$dir/$name.md"
    if [ -f "$file" ]; then
        echo -e "${YELLOW}Page already exists: $file${NC}"
        return
    fi

    # Create the page with a template
    mkdir -p "$dir"
    cat > "$file" << EOF
# $(echo "$name" | sed 's/-/ /g' | sed 's/\b\(.\)/\u\1/g')

## Overview

Brief description of this page.

## Content

Add your content here.

## Related

- Link to related pages
- External resources
EOF

    echo -e "${GREEN}Created new page: $file${NC}"
}

list_pages() {
    echo -e "${BLUE}Documentation Pages:${NC}"
    echo "----------------------------------------"
    
    find "$DOCS_DIR" -name "*.md" | while read -r file; do
        rel_path="${file#$DOCS_DIR/}"
        echo -e "${GREEN}${rel_path%.md}${NC}"
    done
}

edit_page() {
    local name="$1"
    if [ -z "$name" ]; then
        echo -e "${RED}Error: Please provide a page name${NC}"
        exit 1
    fi

    # Try to find the page
    local file
    file=$(find "$DOCS_DIR" -name "$name.md" -o -name "$name" | head -n1)
    
    if [ -z "$file" ]; then
        echo -e "${RED}Error: Page not found: $name${NC}"
        exit 1
    fi

    # Use the default editor or fallback to vim
    ${EDITOR:-vim} "$file"
}

view_page() {
    local name="$1"
    if [ -z "$name" ]; then
        echo -e "${RED}Error: Please provide a page name${NC}"
        exit 1
    fi

    # Try to find the page
    local file
    file=$(find "$DOCS_DIR" -name "$name.md" -o -name "$name" | head -n1)
    
    if [ -z "$file" ]; then
        echo -e "${RED}Error: Page not found: $name${NC}"
        exit 1
    fi

    # Use the default pager or fallback to less
    ${PAGER:-less} "$file"
}

search_docs() {
    local query="$1"
    if [ -z "$query" ]; then
        echo -e "${RED}Error: Please provide a search query${NC}"
        exit 1
    fi

    echo -e "${BLUE}Searching documentation for: $query${NC}"
    echo "----------------------------------------"
    
    grep -r --include="*.md" -i "$query" "$DOCS_DIR" | while IFS=: read -r file line content; do
        rel_path="${file#$DOCS_DIR/}"
        echo -e "${GREEN}${rel_path%.md}${NC}:${YELLOW}$line${NC}"
        echo -e "$content"
        echo "----------------------------------------"
    done
}

build_docs() {
    echo -e "${BLUE}Building documentation...${NC}"
    
    # Check if mkdocs is available
    if command -v mkdocs >/dev/null 2>&1; then
        if [ -f "mkdocs.yml" ]; then
            mkdocs build
            echo -e "${GREEN}Documentation built successfully${NC}"
        else
            echo -e "${YELLOW}No mkdocs.yml found. Creating basic configuration...${NC}"
            cat > mkdocs.yml << EOF
site_name: Project Documentation
site_description: Project documentation and guides
theme: readthedocs

nav:
  - Home: README.md
  - Guides:
    - Getting Started: guides/getting-started.md
  - Reference:
    - Architecture: reference/architecture.md
  - API:
  - Examples:

markdown_extensions:
  - codehilite
  - toc:
      permalink: true
EOF
            mkdocs build
            echo -e "${GREEN}Documentation built successfully${NC}"
        fi
    else
        echo -e "${YELLOW}mkdocs not found. Please install it with:${NC}"
        echo "pip install mkdocs"
    fi
}

serve_docs() {
    echo -e "${BLUE}Serving documentation...${NC}"
    
    # Check if mkdocs is available
    if command -v mkdocs >/dev/null 2>&1; then
        if [ -f "mkdocs.yml" ]; then
            mkdocs serve
        else
            echo -e "${RED}Error: No mkdocs.yml found. Run 'book build' first${NC}"
            exit 1
        fi
    else
        echo -e "${YELLOW}mkdocs not found. Please install it with:${NC}"
        echo "pip install mkdocs"
    fi
}

clean_docs() {
    echo -e "${BLUE}Cleaning built documentation...${NC}"
    
    if [ -d "site" ]; then
        rm -rf site
        echo -e "${GREEN}Cleaned built documentation${NC}"
    else
        echo -e "${YELLOW}No built documentation found${NC}"
    fi
}

if [[ "$1" == "-h" || "$1" == "--help" || -z "$1" ]]; then
    show_help
    exit 0
fi

case "$1" in
    init)
        initialize_docs
        ;;
    new)
        create_page "$2"
        ;;
    list)
        list_pages
        ;;
    edit)
        edit_page "$2"
        ;;
    view)
        view_page "$2"
        ;;
    search)
        search_docs "$2"
        ;;
    build)
        build_docs
        ;;
    serve)
        serve_docs
        ;;
    clean)
        clean_docs
        ;;
    *)
        echo -e "${RED}Error: Unknown command '$1'${NC}"
        show_help
        exit 1
        ;;
esac 