#!/bin/bash

# test-tools: Test script for all WTF-Tools
# Usage: test-tools [tool_name]

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# List of all tools
TOOLS=(
    "latency-check"
    "secret-detector"
    "stash-manager"
    "ssh-key-manager"
    "smart-find"
    "dead-code-detector"
    "build-cache-manager"
    "commit-message-helper"
    "book"
)

# Test directory
TEST_DIR="/tmp/wtf-tools-test"
TEST_FILE="$TEST_DIR/test.txt"

show_help() {
    cat << EOF
Usage: test-tools [tool_name]

Tests all WTF-Tools or a specific tool if specified.

Examples:
    test-tools              # Test all tools
    test-tools latency-check # Test specific tool
EOF
}

check_tools() {
    local missing_tools=()
    local all_present=true

    echo -e "${BLUE}Checking tools...${NC}"
    for tool in "${TOOLS[@]}"; do
        if [ ! -f "$SCRIPT_DIR/$tool" ]; then
            missing_tools+=("$tool")
            all_present=false
        fi
    done

    if [ "$all_present" = false ]; then
        echo -e "${RED}Error: The following tools are missing:${NC}"
        for tool in "${missing_tools[@]}"; do
            echo -e "  - ${RED}$tool${NC}"
        done
        echo -e "\n${YELLOW}Please ensure all tools are present in: $SCRIPT_DIR${NC}"
        exit 1
    fi

    # Make all tools executable
    chmod +x "$SCRIPT_DIR"/*
    echo -e "${GREEN}All tools are present and executable${NC}"
}

# setup_test_env() {
#     echo -e "${BLUE}Setting up test environment...${NC}"
#     rm -rf "$TEST_DIR"
#     mkdir -p "$TEST_DIR"
    
#     # Create test files
#     echo "This is a test file" > "$TEST_FILE"
#     echo "A" >> "$TEST_FILE"
#     echo "" >> "$TEST_FILE"
    
#     # Create test git repo
#     cd "$TEST_DIR"
#     git init > /dev/null
#     git config user.email "test@example.com"
#     git config user.name "Test User"
#     git add "$TEST_FILE"
#     git commit -m "Initial commit" > /dev/null
    
#     # Create test documentation
#     mkdir -p docs
#     echo "# Test Doc" > docs/test.md
    
#     echo -e "${GREEN}Test environment ready${NC}"
# }

cleanup_test_env() {
    echo -e "${BLUE}Cleaning up test environment...${NC}"
    rm -rf "$TEST_DIR"
    echo -e "${GREEN}Cleanup complete${NC}"
}

test_latency_check() {
    echo -e "${BLUE}Testing latency-check...${NC}"
    "$SCRIPT_DIR/latency-check" google.com
    "$SCRIPT_DIR/latency-check" -c 2 google.com
    "$SCRIPT_DIR/latency-check" -t 1 google.com
    echo -e "${GREEN}latency-check tests passed${NC}"
}

test_secret_detector() {
    echo -e "${BLUE}Testing secret-detector...${NC}"
    "$SCRIPT_DIR/secret-detector" "$TEST_DIR"
    "$SCRIPT_DIR/secret-detector" -v "$TEST_DIR"
    "$SCRIPT_DIR/secret-detector" -f "$TEST_FILE"
    echo -e "${GREEN}secret-detector tests passed${NC}"
}

test_stash_manager() {
    echo -e "${BLUE}Testing stash-manager...${NC}"
    cd "$TEST_DIR"
    echo "test change" >> "$TEST_FILE"
    "$SCRIPT_DIR/stash-manager" save "test stash"
    "$SCRIPT_DIR/stash-manager" list
    "$SCRIPT_DIR/stash-manager" pop
    cd - > /dev/null
    echo -e "${GREEN}stash-manager tests passed${NC}"
}

test_ssh_key_manager() {
    echo -e "${BLUE}Testing ssh-key-manager...${NC}"
    "$SCRIPT_DIR/ssh-key-manager" list
    "$SCRIPT_DIR/ssh-key-manager" -h
    echo -e "${GREEN}ssh-key-manager tests passed${NC}"
}

test_smart_find() {
    echo -e "${BLUE}Testing smart-find...${NC}"
    "$SCRIPT_DIR/smart-find" "*.txt" "$TEST_DIR"
    "$SCRIPT_DIR/smart-find" "test*" "$TEST_DIR"
    echo -e "${GREEN}smart-find tests passed${NC}"
}

test_dead_code_detector() {
    echo -e "${BLUE}Testing dead-code-detector...${NC}"
    "$SCRIPT_DIR/dead-code-detector" "$TEST_DIR"
    echo -e "${GREEN}dead-code-detector tests passed${NC}"
}

test_build_cache_manager() {
    echo -e "${BLUE}Testing build-cache-manager...${NC}"
    "$SCRIPT_DIR/build-cache-manager" list
    "$SCRIPT_DIR/build-cache-manager" status
    "$SCRIPT_DIR/build-cache-manager" info npm
    echo -e "${GREEN}build-cache-manager tests passed${NC}"
}

test_commit_message_helper() {
    echo -e "${BLUE}Testing commit-message-helper...${NC}"
    "$SCRIPT_DIR/commit-message-helper" types
    "$SCRIPT_DIR/commit-message-helper" template
    "$SCRIPT_DIR/commit-message-helper" validate "feat: add new feature"
    echo -e "${GREEN}commit-message-helper tests passed${NC}"
}

test_book() {
    echo -e "${BLUE}Testing book...${NC}"
    cd "$TEST_DIR"
    "$SCRIPT_DIR/book" init
    "$SCRIPT_DIR/book" list
    "$SCRIPT_DIR/book" new test-page
    "$SCRIPT_DIR/book" view test-page
    "$SCRIPT_DIR/book" search "test"
    cd - > /dev/null
    echo -e "${GREEN}book tests passed${NC}"
}

run_all_tests() {
    echo -e "${BLUE}Running all tests...${NC}"
    for tool in "${TOOLS[@]}"; do
        echo -e "\n${YELLOW}Testing $tool...${NC}"
        "test_${tool//-/_}"
    done
}

# Main execution
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
    exit 0
fi

# Check if all tools are present and executable
check_tools

# Setup test environment
# setup_test_env

# Run tests
if [ -z "$1" ]; then
    run_all_tests
else
    tool_name="$1"
    if [ -f "$SCRIPT_DIR/$tool_name" ]; then
        "test_${tool_name//-/_}"
    else
        echo -e "${RED}Error: $tool_name not found in $SCRIPT_DIR${NC}"
        exit 1
    fi
fi

# Cleanup
cleanup_test_env

echo -e "\n${GREEN}All tests completed!${NC}" 